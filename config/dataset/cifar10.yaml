# @package _global_

data:
  name: cifar10
  resolution: 32
  height: ${data.resolution}
  width: ${data.resolution}
  channels: 3
  batch_size: 512
  patch_size: 8
  eval_fn: 
    _target_: torch.nn.CrossEntropyLoss
    reduction: mean
  eval_logit_fn:
    _target_: torch.nn.Softmax
    dim: -1
  eval_type: multiclass
  str_patch_size:  ${convert_str:${data.patch_size}}
  mean: 
    _target_: torch.tensor
    data: 
      _target_: numpy.load
      file: ${base_data_home}/cifar-10-batches-py/mean_reshaped.npy
  std: 
    _target_: torch.tensor
    data: 
      _target_: numpy.load
      file: ${base_data_home}/cifar-10-batches-py/std_reshaped.npy
  classes: 10
  task: 1

datasets:
  train:
    _target_: torchvision.datasets.CIFAR10
    root: ${base_data_home}
    train: True
    download: ${download}
    transform: ${transformation.train}

  val:
    _target_: torchvision.datasets.CIFAR10
    root: ${base_data_home}
    train: False
    download: ${download}
    transform: ${transformation.val}

  test:
    _target_: torchvision.datasets.CIFAR10
    root: ${base_data_home}
    train: False
    download: ${download}
    transform: ${transformation.val}

datamodule: 
  _target_: src.dataloader.DataModule
  batch_size: ${data.batch_size}
  num_workers: 8
  classes: ${data.classes}
  channels: ${data.channels}
  name: ${data.name}
  resolution: 
    - ${data.height}
    - ${data.width}

datamodule_eval:
  _target_: src.dataloader.DataModule
  batch_size: ${data.batch_size}
  num_workers: ${datamodule.num_workers}
  classes: ${data.classes}
  channels: ${data.channels}
  resolution: ${data.resolution}
  name: ${data.name}

extradata:
  pcamodule:
    _target_ : numpy.load
    file: ${base_data_home}/cifar-10-batches-py/pc_matrix.npy

  eigenratiomodule:
    _target_: numpy.load
    file: ${base_data_home}/cifar-10-batches-py/eigenvalues_ratio.npy

